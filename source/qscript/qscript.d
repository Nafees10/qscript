/++
Contains everything needed to run QScript scripts.
+/
module qscript.qscript;

import utils.misc;
import utils.lists;
import qscript.compiler.compiler;
import qscript.compiler.misc;
import std.stdio;
import std.conv:to;

import navm.navm;

alias ExternFunction = navm.navm.ExternFunction;
alias NaData = navm.navm.NaData;
deprecated alias QData = NaData;
alias CompileError = qscript.compiler.misc.CompileError;
alias Function = qscript.compiler.misc.Function;
alias DataType = qscript.compiler.misc.DataType;

/// Runs generated byte code generated from the compiler.
/// Uses NaVM, so any ordinary NaVM bytecode can also be run
class QScript{
private:
	NaVM _vm; /// the vm doing all the heavylifting
	Function[] _externFunctionMap; /// stores external functions
	ExternFunction[] _externFunctionPtr; /// stores external function's pointers
	Function[] _functionMap; /// stores script defined functions
	uinteger[string] _functionID; /// stores function names as index, and IDs are read using `_functionID[ID]`
public:
	/// constructor
	this(Function[] externalFunctions, ExternFunction[] externalFunctionPtr){
		_externFunctionMap = externalFunctions.dup;
		_externFunctionPtr = externalFunctionPtr.dup;
		_vm = null;
	}
	~this(){
		if (_vm)
			.destroy(_vm);
	}
	/// adds an external function.
	/// 
	/// Returns: the ID assigned to that function that will be used in the bytecode
	uinteger addFunction(Function externalFunc, ExternFunction externalFuncPtr){
		_externFunctionMap ~= externalFunc;
		_externFunctionPtr ~= externalFuncPtr;
		return _externFunctionPtr.length-1;
	}
	///
	void addFunction(Function[] externalFunc, ExternFunction[] externalFuncPtr){
		_externFunctionMap ~= externalFunc.dup;
		_externFunctionPtr ~= externalFuncPtr.dup;
	}
	/// Initializes the VM. must be called before executing anything in the script. And should only be called after all
	/// external functions have been added
	void initialize(){
		if (_vm)
			.destroy(_vm);
		_vm = new NaVM(_externFunctionPtr);
	}
	/// loads a script, and compiles it
	/// 
	/// Returns: CompileErrors in an array, or arary length == 0 if no errors
	CompileError[] loadScript(string[] script, ref string[] byteCode){
		_vm = new NaVM(_externFunctionPtr);
		CompileError[] errors;
		byteCode = compileScript(script, _externFunctionMap, errors, _functionMap);
		// load bytecode
		if (!_vm)
			throw new Exception("this.initizlize not called before loadScript");
		_vm.load(byteCode);
		// put function names and IDs in _functionID
		foreach (i, func; _functionMap){
			_functionID[func.name] = i;
		}
		return errors;
	}
	/// Returns: ID of a function, -1 if it does not exist
	integer functionID(string functionName){
		if (functionName in _functionID){
			return _functionID[functionName];
		}
		return -1;
	}
	/// executes a function
	/// 
	/// Returns: the return value, if function returned any, otherwise, garbage data
	NaData execute(uinteger functionID, NaData[] args){
		return _vm.execute(functionID, args);
	}
}